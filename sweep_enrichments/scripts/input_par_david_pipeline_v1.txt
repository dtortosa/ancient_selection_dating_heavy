#Sweep_files_prefix: the start of the name of the sweep rank files to test. These files have to provide the ranking of genes according to the selected summary statistic in windows of the indicated sizes. The first column is the ensembl ID, followed by the corresponding gene ranks for all populations included. From the gene with the strongest signal to the lowest in population (column). For example, all_ihsfreqabs_ranks refers to the average iHS in absolute value.
Sweep_files_prefix ihs_all_ranks
#
#Sweep_sizes: the list of the different window sizes used to rank the sweeps
#Sweep_sizes 50kb_100kb_200kb_500kb_1000kb_1kb_2kb_3kb_4kb_5kb
Sweep_sizes 1000kb
#
#Pipeline_dir: path of the directory where all the pipeline is run. Make sure all the elements needed to run the pipeline are in this directory.
Pipeline_dir /home/dftortosa/singularity/dating_climate_adaptation/sweep_enrichments/david_pipeline/exdef_folder/
#
#Valid_genes_file: Creation of file with the genes used for the test. The file contains the Ensembl IDs of the genes that are going to be used by the pipeline. One line in the file = one Ensembl gene ID. Use your own code to generate this file.
Valid_genes_file valid_file.txt
#
#Genes_set_file: create the file that defines the gene set of interest. Genes of interest (VIPs, disease genes, etc.) in the first column are flagged with “yes” in the second column. The other genes are flagged with “no” in the second column. Only the genes also present in the file of used genes (Valid_genes_file) will be used by the pipeline. 
Genes_set_file genes_set_file.txt
#
#Distance_file: compute a file with the distance of every gene from the closest gene of interest (using gene genomic centers as reference points). If a gene is a gene of interest, then the distance is zero. This is done to be able to choose control genes far enough from the genes of interest.
Distance_file distance_file.txt
#
#Factors_table: create a table file that contains all the confounding factors that the bootstrap test will control for. First column is Ensembl gene ID, next columns are each factor that will be matched.
Factors_table factors_table.txt
#
#HGNC_file: file with HGNC names for Ensembl genes to be able to exclude HLA (extreme outliers that can bias results) and histone genes (notorious for abundant gene conversion). Replace this file with your own file if needed. This file has two columns: "Ensembl Gene ID" and "HGNC symbol".
HGNC_file ensembl_hgnc_file.txt
#
#Run_bootstrap: Provides the option to not run the bootstrap test (no) if it was run already. If yes, the test is run and will overwrite the previous bootstrap results in test_outputs
Run_bootstrap yes
#
#Min_distance: minimal distance from genes of interest to choose control genes.
Min_distance 300000
#
#Iterations_number: number of control gene sets to create per bootstrap test run (this is only the number in one run). Has to be a multiple of 100.
Iterations_number 100
#
#Flip: if there are more genes of interest than controls, flips the test to gain power and specificity if set to yes.
Flip no
#
#Max_rep: The maximum number of times a control gene is allowed to be included in a control set. The less the better, so you avoid being sampling the same genes over and over again. Thus you get a more representative sample of the control genome, increasing the power (detect true signals) and the specificity (not considering true negatives). But careful with making this number too small. Low Max_rep may lead to the bootstrap_test_script.pl to fail finding enough controls
Max_rep 10
#
#Runs_number: total number of times to run the bootstrap test. In each run, multiple control sets are created, as many as indicated in Iterations_number. If Runs_number is higher than 1, the whole bootstrap is started several times at the same time.  Typically, use Iterations_number*Runs_number = 10,000, but not more unless you have very large storage and computing power.
Runs_number 1
#
#Simult_runs: maximum number of runs running simultaneously. It depends on the total number of cores you have available.
Simult_runs 10
#
#Tolerance_range: the range of departure from the average of confounding factors allowed during the matching of control genes to the gene set of interest in the bootstrap test. I typically use a range of 0.05, meaning that the average of confounding factors in the control sets has to be around the average in the gene set of interest, + or – 5%.
Tolerance_range 0.5
#
#Count_sweeps: yes or no. Instructs the script that quantifies the excess or deficit of sweeps to count either the number of sweeps (yes) or the number of genes in sweeps (no).
Count_sweeps no
#
#Run_sweeps_count: yes or no. Runs the counting of sweeps or genes (yes) or not (no) if it was already done and does not need to be done again.
Run_sweeps_count yes
#
#Cluster_distance: maximum distance between genes to count them as overlapping the same selective sweep. A large value may count two neighboring sweeps as one.
Cluster_distance 500000
#
#Gene_coords_file: file with gene coordinates, to notably assess the clustering of neighboring genes in the same sweep.
Gene_coords_file ensembl_gene_coords_v99.txt
#
#Threshold_list: list of rank thresholds to use to assess deficit/enrichment. It can be higher than 2000, but it is slower.
Threshold_list 2000,1500,1000,900,800,700,600,500,450,400,350,300,250,200,150,100,90,80,70,60,50,40,30,25,20,15,10
#
#Populations_list: list of populations as they are ordered in the sweep files. It is the user’s responsibility to have a sweep file with the corresponding populations as indicated in Populations_list.
Populations_list ACBD,ASWD,BEBD,CDXD,CEUD,CHBD,CHSD,CLMD,ESND,FIND,GBRD,GIHD,GWDD,IBSD,ITUD,JPTD,KHVD,LWKD,MSLD,MXLD,PELD,PJLD,PURD,STUD,TSID,YRID
#Populations_list CDXD,CHBD,CHSD,JPTD,KHVD
#
#Groups_list: a list of groups in which the populations from Population_list fall. Group_list has the same number of elements as Population_list. For each population in Population_list, the corresponding element in Group_list is the name of the group that the corresponding population belongs to.
Groups_list MIS,MIS,SAS,EAS,EUR,EAS,EAS,AMR,AFR,EUR,EUR,SAS,AFR,EUR,SAS,EAS,EAS,AFR,AFR,AMR,AMR,SAS,AMR,SAS,EUR,AFR
#Groups_list EAS,EAS,EAS,EAS,EAS
#
#Pop_interest: the population of particular interest to adjust the precision and speed of the script that counts sweeps (see step 7 below). Can be either a single population, or one of the groups defined in Groups_list, or all the populations in the sweep file (then Pop_interest is set to “All”)
Pop_interest ESN
#
#Run_FDR: yes or no. Run the FDR or not. This is only run if there is a significant enrichment of excess detected in the bootstrap.
Run_FDR yes
#
#Run_shuffling: yes or no. Run the shuffling of genome for FDR analysis or not, in the case it has already been done (the same shuffled genomes may be reused for a different set of genes of interest, or for re-running the same test, for example if a previous attempt to run the test was interrupted, but the genome shuffling step had completed).
Run_shuffling yes
#
#FDR_number: number of times the genome will be shuffled and the bootstrap test re-run on shuffled genomes to estimate a false discovery rate that takes clustering into account. Caution, a large FDR_number will take a LOT of disk space. Due to a quirk of the current version of the pipeline.
FDR_number 1000
#
#Shuffling_segments_number: number of segments in which to cut the genome. The segments are then randomly flipped and their order randomly permuted. This effectively shuffles the sweeps while conserving the clustering of genes within the same sweeps
Shuffling_segments_number 10
#
#Interrupted_FDR_run: yes or no. Specifies if you want to continue running a previously interrupted FDR analysis (yes), or if you want to start a whole new FDR analysis from scratch, in which case previously generated files for FDR present in the test_outputs folder will be removed (no).
Interrupted_FDR_run no
